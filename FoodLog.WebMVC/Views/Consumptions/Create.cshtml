@*Добавить съеденный продукт Consumption.cs*@

@using FoodLog.DAL.Entities
@using Newtonsoft.Json;
@model Consumption

@{
    ViewData["Title"] = "Добавить съеденный продукт";
}

<div class="container createNew">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="text-center my-5">Добавить съеденный продукт</h2>

            <form asp-action="Create" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group row my-2">
                    <label for="ProductGuid" class="col-sm-4 col-form-label">Продукт</label>
                    <div class="col-sm-5">
                        <select class="form-control" id="ProductGuid" name="ProductGuid" required>
                            <option value="">Выберите продукт</option>
                            @foreach (var product in ViewBag.AllProducts)
                            {
                                <option value="@product.Guid">@product.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group row my-2">
                    <label for="Brutto" class="col-sm-4 col-form-label">Вес из магазина</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="Brutto" name="Brutto" required>
                    </div>
                </div>

                <div class="form-group row my-2">
                    <label for="TrashPercentage" class="col-sm-4 col-form-label">Списано в %</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="TrashPercentage" name="TrashPercentage" value="">
                    </div>
                </div>

                <div class="form-group row my-2">
                    <label for="TrashWeight" class="col-sm-4 col-form-label">Списано в г</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="TrashWeight" name="TrashWeight">
                    </div>
                </div>


                <div class="form-group row my-2">
                    <label for="Netto" class="col-sm-4 col-form-label">Чистый вес</label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="Netto" name="Netto">
                    </div>
                </div>


                <div class="form-group row my-2">
                    <label for="Date" class="col-sm-4 col-form-label">Дата</label>
                    <div class="col-sm-3">
                        <input type="date" class="form-control" id="Date" name="Date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                    </div>
                </div>



                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-outline-primary">Добавить</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="/js/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        // Обработчик события изменения выбора продукта
        var selectedProductGuid;
        var allProductsJson;
        var selectedProduct;
        var brutto;
        var netto;
        var trashPercent;
        var trashWeight

        $("#ProductGuid").change(function () {                // Если выбираем продукт
            selectedProductGuid = $(this).val();
            allProductsJson = @Html.Raw(JsonConvert.SerializeObject(ViewBag.AllProducts));
            selectedProduct = allProductsJson.find(product => product.Guid === selectedProductGuid);

            $("#TrashPercentage").val(selectedProduct.TrashPercentage);

            if (!isNaN(brutto))
                updateTrashWeight();
            updateNetto();

        });

        // Обработчик события изменения значения поля "Вес из магазина"
        $("#Brutto").on("input", function () {
            updateTrashWeight();
        });

        // Обработчик события изменения значения поля "Списано в г"
        $("#TrashWeight").on("input", function () {
            updateTrashPercentage();
            updateNetto();
        });

        // Обработчик события изменения значения поля "Списано в %"
        $("#TrashPercentage").on("input", function () {
            updateTrashWeightFromPercentage();
        });

        function updateTrashWeight() {                           // Если меняем "Списано в г" (и при выборе продукта)
            brutto = parseFloat($("#Brutto").val());                        // Получаем "Вес из магазина""
            trashPercent = parseFloat($("#TrashPercentage").val());         // Получаем "Списание в %"

            if (!isNaN(brutto) && !isNaN(trashPercent)) {                   // Выполняется, если "Вес из Магазина" и "Списание в %" заполнены (и являются числами)
                trashWeight = (brutto * trashPercent) / 100;
                $("#TrashWeight").val(trashWeight.toFixed(0));
                updateNetto();
            } else {
                // ?
            }
        }

        function updateTrashPercentage() {                      // Если меняем "Списано в %"
            brutto = parseFloat($("#Brutto").val());
            trashWeight = parseFloat($("#TrashWeight").val());

            if (!isNaN(brutto) && !isNaN(trashWeight)) {
                trashPercent = (trashWeight / brutto) * 100;
                $("#TrashPercentage").val(trashPercent.toFixed(0));
            } else {
                $("#TrashPercentage").val("");
            }
        }

        function updateTrashWeightFromPercentage() {           // Меняем "Списано в г" если изменили "Списано в %"
            brutto = parseFloat($("#Brutto").val());
            trashPercent = parseFloat($("#TrashPercentage").val());

            if (!isNaN(brutto) && !isNaN(trashPercent)) {
                trashWeight = (brutto * trashPercent) / 100;
                $("#TrashWeight").val(trashWeight.toFixed(0));
                updateNetto();
            } else {
                $("#TrashWeight").val("");
                updateNetto();
            }
        }

        function updateNetto() {
            brutto = parseFloat($("#Brutto").val());
            trashWeight = parseFloat($("#TrashWeight").val());

            if (!isNaN(brutto) && !isNaN(trashWeight)) {
                netto = brutto - trashWeight;
                $("#Netto").val(netto.toFixed(0));
            } else {
                $("#Netto").val("");
            }
        }
    });
</script>



<style>
    .createNew * input {
        min-width: 60px;
        max-width: 300px;
    }

    /*.createNew * label {
                                min-width: 300px;
                            }*/

    .createNew * form {
        min-width: 600px;
    }
</style>
