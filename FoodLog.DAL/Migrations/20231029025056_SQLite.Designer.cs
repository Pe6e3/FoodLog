// <auto-generated />
using System;
using FoodLog.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodLog.DAL.Migrations
{
    [DbContext(typeof(FoodLogDbContext))]
    [Migration("20231029025056_SQLite")]
    partial class SQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductsGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesGuid", "ProductsGuid");

                    b.HasIndex("ProductsGuid");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("2ba3c00f-7f00-48f0-b2ab-4cbf14857348"),
                            Name = "Фрукты"
                        },
                        new
                        {
                            Guid = new Guid("688ffea4-7401-495c-987c-5f8bc1df29ac"),
                            Name = "Сухофрукты"
                        },
                        new
                        {
                            Guid = new Guid("9cdd9301-c8df-4157-881b-2c284b143999"),
                            Name = "Зелень / Овощи"
                        },
                        new
                        {
                            Guid = new Guid("b2a3784e-263d-480e-afd6-342cc06834d5"),
                            Name = "Соки / Чай"
                        },
                        new
                        {
                            Guid = new Guid("0f491438-ff22-4d16-844a-f3e72fb2aabb"),
                            Name = "Вода"
                        },
                        new
                        {
                            Guid = new Guid("8c854d14-ae1c-416d-9df3-54510c0487b5"),
                            Name = "Орехи / Злаки / Семена"
                        },
                        new
                        {
                            Guid = new Guid("e4528903-8841-4155-a8c9-a7b534f03f33"),
                            Name = "Термичка растительная"
                        },
                        new
                        {
                            Guid = new Guid("7530ee04-b294-4fd7-b578-7763ff6aa7a4"),
                            Name = "Молочка"
                        },
                        new
                        {
                            Guid = new Guid("de6179cf-7736-43f8-a034-7e854634a606"),
                            Name = "Яйцо"
                        },
                        new
                        {
                            Guid = new Guid("0e91335b-d0a0-4c49-8a71-11d2efa56346"),
                            Name = "Рыба / Морепродукты"
                        },
                        new
                        {
                            Guid = new Guid("f3971a41-523b-4cb0-895a-4830143802e9"),
                            Name = "Мясо"
                        },
                        new
                        {
                            Guid = new Guid("1e5788e1-ddbd-4cd7-be9b-e78b3b3ee4f1"),
                            Name = "Термичка на ПЖП"
                        },
                        new
                        {
                            Guid = new Guid("309a3225-dd48-4df2-a2d2-8b4fca22f456"),
                            Name = "Кофе"
                        },
                        new
                        {
                            Guid = new Guid("102399d4-726f-4518-a2cc-9c669222deb9"),
                            Name = "Кондитерка"
                        });
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Consumption", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Brutto")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<double>("Netto")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("GuidOfPurchase");

                    b.HasIndex("ProductGuid");

                    b.ToTable("Consumptions");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.DishProduct", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DishGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("Netto")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("DishProducts");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Calories")
                        .HasColumnType("REAL");

                    b.Property<double>("Carb")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("DishGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DishProductGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("Fat")
                        .HasColumnType("REAL");

                    b.Property<double>("HarmScore")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Prot")
                        .HasColumnType("REAL");

                    b.Property<double>("TrashPercentage")
                        .HasColumnType("REAL");

                    b.HasKey("Guid");

                    b.HasIndex("DishProductGuid");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("3db5763d-e6a5-4f44-977c-39d64ec61840"),
                            Calories = 52.0,
                            Carb = 11.4,
                            Fat = 0.40000000000000002,
                            HarmScore = 10.0,
                            Name = "Яблоко",
                            Prot = 0.29999999999999999,
                            TrashPercentage = 10.0
                        },
                        new
                        {
                            Guid = new Guid("697970ff-4fee-459f-bb53-6dec5a413db5"),
                            Calories = 576.0,
                            Carb = 6.0,
                            Fat = 49.0,
                            HarmScore = 20.0,
                            Name = "Миндаль",
                            Prot = 21.0,
                            TrashPercentage = 0.0
                        },
                        new
                        {
                            Guid = new Guid("c0bf77c9-7d1b-4886-98dc-299136a5c9a7"),
                            Calories = 18.0,
                            Carb = 3.8999999999999999,
                            Fat = 0.20000000000000001,
                            HarmScore = 5.0,
                            Name = "Томат",
                            Prot = 0.90000000000000002,
                            TrashPercentage = 5.0
                        },
                        new
                        {
                            Guid = new Guid("546347c6-5080-4149-b87b-259d0b6dd988"),
                            Calories = 59.0,
                            Carb = 4.7000000000000002,
                            Fat = 3.0,
                            HarmScore = 15.0,
                            Name = "Йогурт",
                            Prot = 3.5,
                            TrashPercentage = 0.0
                        },
                        new
                        {
                            Guid = new Guid("b504ca0e-626d-4d02-aed5-b42ee1c94fd3"),
                            Calories = 208.0,
                            Carb = 0.0,
                            Fat = 14.300000000000001,
                            HarmScore = 25.0,
                            Name = "Лосось",
                            Prot = 20.0,
                            TrashPercentage = 0.0
                        },
                        new
                        {
                            Guid = new Guid("b508dca2-45c1-4946-b325-73256b6247f2"),
                            Calories = 96.0,
                            Carb = 21.0,
                            Fat = 0.20000000000000001,
                            HarmScore = 10.0,
                            Name = "Банан",
                            Prot = 1.0,
                            TrashPercentage = 36.0
                        },
                        new
                        {
                            Guid = new Guid("efa1e2c5-6ce1-4b6a-9be7-113e55f42e24"),
                            Calories = 43.0,
                            Carb = 8.1999999999999993,
                            Fat = 0.20000000000000001,
                            HarmScore = 5.0,
                            Name = "Апельсин",
                            Prot = 0.90000000000000002,
                            TrashPercentage = 40.0
                        },
                        new
                        {
                            Guid = new Guid("cc2f7bff-9df5-4061-b138-0a25c61d820b"),
                            Calories = 69.0,
                            Carb = 17.600000000000001,
                            Fat = 0.20000000000000001,
                            HarmScore = 8.0,
                            Name = "Виноград",
                            Prot = 0.59999999999999998,
                            TrashPercentage = 10.0
                        },
                        new
                        {
                            Guid = new Guid("f795a259-ef14-43e7-a5f4-4e6b8342173a"),
                            Calories = 57.0,
                            Carb = 12.699999999999999,
                            Fat = 0.10000000000000001,
                            HarmScore = 7.0,
                            Name = "Груша",
                            Prot = 0.40000000000000002,
                            TrashPercentage = 3.0
                        },
                        new
                        {
                            Guid = new Guid("c455cbae-04a7-410e-ae12-d837822f91fe"),
                            Calories = 61.0,
                            Carb = 14.6,
                            Fat = 0.5,
                            HarmScore = 6.0,
                            Name = "Киви",
                            Prot = 1.1000000000000001,
                            TrashPercentage = 12.0
                        });
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percent")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("ProductGuid");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.ProductStorage", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentCost")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentWeight")
                        .HasColumnType("REAL");

                    b.Property<Guid>("GuidOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("GuidOfPurchase")
                        .IsUnique();

                    b.HasIndex("ProductGuid");

                    b.ToTable("ProductsStorage");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Guid");

                    b.HasIndex("ProductGuid");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Trash", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuidOfPurchase")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("TrashCost")
                        .HasColumnType("REAL");

                    b.Property<double>("TrashWeight")
                        .HasColumnType("REAL");

                    b.Property<Guid>("WriteOffReasonGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("GuidOfPurchase");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("WriteOffReasonGuid");

                    b.ToTable("Trashes");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.WriteOffReason", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("WriteOffReasons");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("12b371d8-ab00-4a7b-8802-d8a0f371ce84"),
                            ReasonName = "Несъедобная часть"
                        },
                        new
                        {
                            Guid = new Guid("c6d540f1-15f5-4448-b544-f444528a0a6f"),
                            ReasonName = "Потеря/усушка"
                        },
                        new
                        {
                            Guid = new Guid("18857c48-f418-4446-bf20-00ca92e12852"),
                            ReasonName = "Угостил"
                        },
                        new
                        {
                            Guid = new Guid("114e9fa9-9337-4bad-b0c3-782851ac4147"),
                            ReasonName = "Испортился"
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Consumption", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("GuidOfPurchase")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Product", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Product", "DishProduct")
                        .WithMany()
                        .HasForeignKey("DishProductGuid");

                    b.Navigation("DishProduct");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.ProductCategory", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.ProductStorage", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Purchase", "Purchase")
                        .WithOne()
                        .HasForeignKey("FoodLog.DAL.Entities.ProductStorage", "GuidOfPurchase")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Purchase", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.Trash", b =>
                {
                    b.HasOne("FoodLog.DAL.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("GuidOfPurchase")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLog.DAL.Entities.WriteOffReason", "WriteOffReason")
                        .WithMany("Trashes")
                        .HasForeignKey("WriteOffReasonGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");

                    b.Navigation("WriteOffReason");
                });

            modelBuilder.Entity("FoodLog.DAL.Entities.WriteOffReason", b =>
                {
                    b.Navigation("Trashes");
                });
#pragma warning restore 612, 618
        }
    }
}
